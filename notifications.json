{"type":"PR","pr":{"number":8,"head":"c79b356c82f35d93071387674667b6c4fc79e0b0"},"user":"nataliafitzgerald","status":"draft","branch":"cms/notifications","collection":"page-component","title":"Notifications","description":"# Notifications\n\nWhere possible, display formatting errors immediately using client-side validation so the user doesn’t have to wait until submitting to see what went wrong (this is especially frustrating if the information the user enters the first time around is not cached on submit and they have to fill out all the fields again from scratch). If letters are entered in a date field, if an email address is missing the “@” sign, let the user know right away by showing a field-level error on blur.\n\nThat said, it’s a good idea to always validate on the server side even if you use client-side validation for formatting checks. That’s because JavaScript validation may not work on all clients; JavaScript errors could occur no matter the client; and JS validation can easily be bypassed, which raises security concerns.\n\nIn general, the best practice for server-side validation is to mark errors with both form-level and field-level errors.\n\n#### Accessibility\n\nFor screen reader accessibility, form-level errors should include anchor links to the problem field in question. In general, use distinct icons, contrasting colors, prominent placement, and text to indicate errors. Don’t rely on just one method, as users can have many different accessibility needs (color blind users, visually impaired users, users with motor control issues, etc.).\n\n### States\n\n#### Action\n\nThe action notification displays when something is happening on the page, such as a page loading notification as search results are found. Use animated minicons to reassure the user that an action is functioning as intended.\n\n* Border: 1 px, Gray 40 (#b4b5b6)\n* Background: Gray 10 (#f7f8f9)\n* Padding: 15px\n* H4 (Avenir Next Medium, 18 px) Black (#101820)\n* Minicon: 18 px, Gray (#5a5d61)\n\n#### Success\n\nThe success notification displays when an operation has run as expected, such as returning the number of results in a search or a form has been successfully submitted.\n\n* Border: 2 px, CFPB Green (#20aa3f)\n* Background: Green 20 (#e2efd8)\n* Minicon: 18px, CFPB Green (#20aa3f)\n\n#### Success (field-level)\n\n* Border: 2 px, CFPB Green (#20aa3f)\n* Minicon: 18 px, CFPB Green (#20aa3f)\n* Success minicon and message should always appear below input field\n\n#### Warning\n\nThe warning notification displays when an operation has run as expected, but doesn’t have the expected results,such as a search that returned no results.This can also be used to display additional critical information to a user before they submit a form, such as how their data will be used and protected or a reminder that they can’t edit their responses after submitting.\n\n* Border: 2 px, Gold (#ff9e1b)\n* Background: Gold 20 (#fff0dd)\n* Minicon: 18px, Gold (#ff9e1b)\n\n#### Warning (field-level)\n\n* Border: 2 px, Gold (#ff9e1b)\n* Minicon: 18 px, Gold (#ff9e1b)\n\n#### Error\n\nThe error notification displays when an operation has not run as expected and encounters an error. Use after validating on the server side to call out input errors preventing form submission.\n\nFor screen reader accessibility, include anchor links to the fields that need correction\n\n* Place form-level alerts below the form title\n* Border: 2 px, Red (#d14124)\n* Background: Red 20 (#fff0dd)\n* Minicon: 18px, Red (#d14124)\n\n#### Error (field-level)\n\n* Border: 2 px, Red (#d14124)\n* Minicon: 18 px, Red (#d14124)\n* Error minicon and message should always appear below input field","objects":{"entry":{"path":"page-components/notifications.md","sha":"0a733b98a3cbebeab56f70016fd2c78a48e2a5f8"},"files":[]},"timeStamp":"2019-05-17T21:13:00.166Z"}